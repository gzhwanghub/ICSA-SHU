# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _train_framework
else:
    import _train_framework

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


LEFT = _train_framework.LEFT
RIGHT = _train_framework.RIGHT
UP = _train_framework.UP
DOWN = _train_framework.DOWN
class feature_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_train_framework.feature_node_index_get, _train_framework.feature_node_index_set)
    value = property(_train_framework.feature_node_value_get, _train_framework.feature_node_value_set)

    def __init__(self):
        _train_framework.feature_node_swiginit(self, _train_framework.new_feature_node())
    __swig_destroy__ = _train_framework.delete_feature_node

# Register feature_node in _train_framework:
_train_framework.feature_node_swigregister(feature_node)

class Function(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fun(self, w, y, z):
        return _train_framework.Function_fun(self, w, y, z)

    def grad(self, w, g, y, z):
        return _train_framework.Function_grad(self, w, g, y, z)

    def batch_grad(self, g, w, y, z, batch_val):
        return _train_framework.Function_batch_grad(self, g, w, y, z, batch_val)

    def Hv(self, s, Hs):
        return _train_framework.Function_Hv(self, s, Hs)

    def get_nr_variable(self):
        return _train_framework.Function_get_nr_variable(self)

    def get_number(self):
        return _train_framework.Function_get_number(self)

    def get_diagH(self, M):
        return _train_framework.Function_get_diagH(self, M)
    __swig_destroy__ = _train_framework.delete_Function

# Register Function in _train_framework:
_train_framework.Function_swigregister(Function)

class sparse_operator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def dot(s, x):
        return _train_framework.sparse_operator_dot(s, x)

    @staticmethod
    def axpy(a, x, y):
        return _train_framework.sparse_operator_axpy(a, x, y)

    def __init__(self):
        _train_framework.sparse_operator_swiginit(self, _train_framework.new_sparse_operator())
    __swig_destroy__ = _train_framework.delete_sparse_operator

# Register sparse_operator in _train_framework:
_train_framework.sparse_operator_swigregister(sparse_operator)

def sparse_operator_dot(s, x):
    return _train_framework.sparse_operator_dot(s, x)

def sparse_operator_axpy(a, x, y):
    return _train_framework.sparse_operator_axpy(a, x, y)


def LeftTrim(s):
    return _train_framework.LeftTrim(s)

def RightTrim(s):
    return _train_framework.RightTrim(s)

def Trim(s):
    return _train_framework.Trim(s)
class Properties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _train_framework.Properties_swiginit(self, _train_framework.new_Properties(*args))

    def GetString(self, property_name):
        return _train_framework.Properties_GetString(self, property_name)

    def GetInt(self, property_name):
        return _train_framework.Properties_GetInt(self, property_name)

    def GetDouble(self, property_name):
        return _train_framework.Properties_GetDouble(self, property_name)

    def GetBool(self, property_name):
        return _train_framework.Properties_GetBool(self, property_name)

    def HasProperty(self, property_name):
        return _train_framework.Properties_HasProperty(self, property_name)

    def CheckProperty(self, property_name):
        return _train_framework.Properties_CheckProperty(self, property_name)

    def Print(self):
        return _train_framework.Properties_Print(self)
    __swig_destroy__ = _train_framework.delete_Properties

# Register Properties in _train_framework:
_train_framework.Properties_swigregister(Properties)

class args_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rank, size, properties):
        _train_framework.args_t_swiginit(self, _train_framework.new_args_t(rank, size, properties))
    myid = property(_train_framework.args_t_myid_get, _train_framework.args_t_myid_set)
    procnum = property(_train_framework.args_t_procnum_get, _train_framework.args_t_procnum_set)
    worker_per_group_ = property(_train_framework.args_t_worker_per_group__get, _train_framework.args_t_worker_per_group__set)
    sqrt_procnum_ = property(_train_framework.args_t_sqrt_procnum__get, _train_framework.args_t_sqrt_procnum__set)
    sqrt_leader_ = property(_train_framework.args_t_sqrt_leader__get, _train_framework.args_t_sqrt_leader__set)
    leader_num_ = property(_train_framework.args_t_leader_num__get, _train_framework.args_t_leader_num__set)
    max_delay = property(_train_framework.args_t_max_delay_get, _train_framework.args_t_max_delay_set)
    min_barrier = property(_train_framework.args_t_min_barrier_get, _train_framework.args_t_min_barrier_set)
    rho = property(_train_framework.args_t_rho_get, _train_framework.args_t_rho_set)
    max_iterations = property(_train_framework.args_t_max_iterations_get, _train_framework.args_t_max_iterations_set)
    l1reg = property(_train_framework.args_t_l1reg_get, _train_framework.args_t_l1reg_set)
    l2reg = property(_train_framework.args_t_l2reg_get, _train_framework.args_t_l2reg_set)
    ABSTOL = property(_train_framework.args_t_ABSTOL_get, _train_framework.args_t_ABSTOL_set)
    RELTOL = property(_train_framework.args_t_RELTOL_get, _train_framework.args_t_RELTOL_set)
    group_count = property(_train_framework.args_t_group_count_get, _train_framework.args_t_group_count_set)
    group_type = property(_train_framework.args_t_group_type_get, _train_framework.args_t_group_type_set)
    thread_num = property(_train_framework.args_t_thread_num_get, _train_framework.args_t_thread_num_set)
    filter_type = property(_train_framework.args_t_filter_type_get, _train_framework.args_t_filter_type_set)
    __swig_destroy__ = _train_framework.delete_args_t

# Register args_t in _train_framework:
_train_framework.args_t_swigregister(args_t)

class meta(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_train_framework.meta_key_get, _train_framework.meta_key_set)
    value = property(_train_framework.meta_value_get, _train_framework.meta_value_set)

    def __init__(self):
        _train_framework.meta_swiginit(self, _train_framework.new_meta())
    __swig_destroy__ = _train_framework.delete_meta

# Register meta in _train_framework:
_train_framework.meta_swigregister(meta)

class problem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _train_framework.problem_swiginit(self, _train_framework.new_problem(*args))

    def read_problem(self, filename):
        return _train_framework.problem_read_problem(self, filename)

    def readline(self, input):
        return _train_framework.problem_readline(self, input)

    def exit_input_error(self, line_num):
        return _train_framework.problem_exit_input_error(self, line_num)
    l = property(_train_framework.problem_l_get, _train_framework.problem_l_set)
    n = property(_train_framework.problem_n_get, _train_framework.problem_n_set)
    y = property(_train_framework.problem_y_get, _train_framework.problem_y_set)
    sol = property(_train_framework.problem_sol_get, _train_framework.problem_sol_set)
    x = property(_train_framework.problem_x_get, _train_framework.problem_x_set)
    x_space = property(_train_framework.problem_x_space_get, _train_framework.problem_x_space_set)
    bias = property(_train_framework.problem_bias_get, _train_framework.problem_bias_set)
    line = property(_train_framework.problem_line_get, _train_framework.problem_line_set)
    max_line_len = property(_train_framework.problem_max_line_len_get, _train_framework.problem_max_line_len_set)
    __swig_destroy__ = _train_framework.delete_problem

# Register problem in _train_framework:
_train_framework.problem_swigregister(problem)

class TRON(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fun_obj, eps=0.1, eps_cg=0.1, max_iter=1000):
        _train_framework.TRON_swiginit(self, _train_framework.new_TRON(fun_obj, eps, eps_cg, max_iter))
    __swig_destroy__ = _train_framework.delete_TRON

    def tron(self, w, y, z, statistical_time, tron_iteration, cg_iter_array):
        return _train_framework.TRON_tron(self, w, y, z, statistical_time, tron_iteration, cg_iter_array)

    def set_print_string(self, i_print):
        return _train_framework.TRON_set_print_string(self, i_print)

# Register TRON in _train_framework:
_train_framework.TRON_swigregister(TRON)

class l2r_lr_fun(Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, prob, C):
        _train_framework.l2r_lr_fun_swiginit(self, _train_framework.new_l2r_lr_fun(prob, C))
    __swig_destroy__ = _train_framework.delete_l2r_lr_fun

    def fun(self, w, y, z):
        return _train_framework.l2r_lr_fun_fun(self, w, y, z)

    def grad(self, w, g, y, z):
        return _train_framework.l2r_lr_fun_grad(self, w, g, y, z)

    def batch_grad(self, g, w, y, z, batch_val):
        return _train_framework.l2r_lr_fun_batch_grad(self, g, w, y, z, batch_val)

    def Hv(self, s, Hs):
        return _train_framework.l2r_lr_fun_Hv(self, s, Hs)

    def get_nr_variable(self):
        return _train_framework.l2r_lr_fun_get_nr_variable(self)

    def get_number(self):
        return _train_framework.l2r_lr_fun_get_number(self)

    def get_diagH(self, M):
        return _train_framework.l2r_lr_fun_get_diagH(self, M)

# Register l2r_lr_fun in _train_framework:
_train_framework.l2r_lr_fun_swigregister(l2r_lr_fun)

class Collective(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, args, problem):
        _train_framework.Collective_swiginit(self, _train_framework.new_Collective(args, problem))

    def RingAllreduce(self, data, count, communicator):
        return _train_framework.Collective_RingAllreduce(self, data, count, communicator)

    def TorusAllreduce(self, data, worker_per_group, group_count, communicator, nbrs):
        return _train_framework.Collective_TorusAllreduce(self, data, worker_per_group, group_count, communicator, nbrs)

    def HierarchicalTorus(self, data, MAINGRP_COMM, SUBGRP_COMM, nbrs):
        return _train_framework.Collective_HierarchicalTorus(self, data, MAINGRP_COMM, SUBGRP_COMM, nbrs)

    def HierarchicalAllreduce(self, data, MAINGRP_COMM, SUBGRP_COMM):
        return _train_framework.Collective_HierarchicalAllreduce(self, data, MAINGRP_COMM, SUBGRP_COMM)

    def CreateTorus(self, OLD_COMM, TORUS_COMM, worker_per_group, main_size, nbrs):
        return _train_framework.Collective_CreateTorus(self, OLD_COMM, TORUS_COMM, worker_per_group, main_size, nbrs)
    __swig_destroy__ = _train_framework.delete_Collective

# Register Collective in _train_framework:
_train_framework.Collective_swigregister(Collective)

class ADMM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, args, prob, test_file_path, collective):
        _train_framework.ADMM_swiginit(self, _train_framework.new_ADMM(args, prob, test_file_path, collective))
    __swig_destroy__ = _train_framework.delete_ADMM

    def x_update(self):
        return _train_framework.ADMM_x_update(self)

    def y_update(self):
        return _train_framework.ADMM_y_update(self)

    def z_update(self):
        return _train_framework.ADMM_z_update(self)

    def is_stop(self):
        return _train_framework.ADMM_is_stop(self)

    def softThreshold(self, t, z):
        return _train_framework.ADMM_softThreshold(self, t, z)

    def train(self):
        return _train_framework.ADMM_train(self)

    def predict(self, last_iter):
        return _train_framework.ADMM_predict(self, last_iter)

    def GetObjectValue(self):
        return _train_framework.ADMM_GetObjectValue(self)

    def subproblem_tron(self):
        return _train_framework.ADMM_subproblem_tron(self)

    def CreateGroup(self):
        return _train_framework.ADMM_CreateGroup(self)

    def GetSVMObjectValue(self, type):
        return _train_framework.ADMM_GetSVMObjectValue(self, type)

    def draw(self):
        return _train_framework.ADMM_draw(self)

# Register ADMM in _train_framework:
_train_framework.ADMM_swigregister(ADMM)


def test_main(comm):
    return _train_framework.test_main(comm)

def test_main3(comm):
    return _train_framework.test_main3(comm)


